---
layout: post
title:  "CV 模型训练与验证"
date:   2020-05-30 16:34:47 +0800
categories: jekyll update
---


#Task4 模型训练与验证    

### 4.2 构造验证集    

* 随着模型复杂度和模型训练轮数的增加，CNN模型在训练集上的误差会降低，但在测试集上的误差会逐渐降低，然后逐渐升高，而我们为了追求的是模型在测试集上的精度越高越好。         
       
导致模型过拟合的情况有很多种原因，其中最为常见的情况是模型复杂度（Model Complexity ）太高，导致模型学习到了训练数据的方方面面，学习到了一些细枝末节的规律。       
      
解决上述问题最好的解决方法：构建一个与测试集尽可能分布一致的样本集（可称为验证集），在训练过程中不断验证模型在验证集上的精度，并以此控制模型的训练。       
        
 
- #### 训练集（Train Set）：模型用于训练和调整模型参数；
- #### 验证集（Validation Set）：用来验证模型精度和调整模型超参数；
- #### 测试集（Test Set）：验证模型的泛化能力。
       

- #### 留出法（Hold-Out）           
直接将训练集划分成两部分，新的训练集和验证集。这种划分方式的优点是最为直接简单；缺点是只得到了一份验证集，有可能导致模型在验证集上过拟合。留出法应用场景是数据量比较大的情况。     
      
- #### 交叉验证法（Cross Validation，CV）      
将训练集划分成K份，将其中的K-1份作为训练集，剩余的1份作为验证集，循环K训练。这种划分方式是所有的训练集都是验证集，最终模型验证精度是K份平均得到。这种方式的优点是验证集精度比较可靠，训练K次可以得到K个有多样性差异的模型；CV验证的缺点是需要训练K次，不适合数据量很大的情况。     
      
- #### 自助采样法（BootStrap）      
通过有放回的采样方式得到新的训练集和验证集，每次的训练集和验证集都是有区别的。这种划分方式一般适用于数据量较小的情况。      
             


### 4.4 模型保存与加载
在Pytorch中模型的保存和加载非常简单，比较常见的做法是保存和加载模型参数：        
       ``` torch.save(model_object.state_dict(), 'model.pt') ```            
       ```model.load_state_dict(torch.load(' model.pt')) ``` 
       
 ### 4.5 模型调参流程     
深度学习原理少但实践性非常强，基本上很多的模型的验证只能通过训练来完成。同时深度学习有众多的网络结构和超参数，因此需要反复尝试。训练深度学习模型需要GPU的硬件支持，也需要较多的训练时间，如何有效的训练深度学习模型逐渐成为了一门学问。
             
深度学习有众多的训练技巧，比较推荐的阅读链接有：          
- http://lamda.nju.edu.cn/weixs/project/CNNTricks/CNNTricks.html      
- http://karpathy.github.io/2019/04/25/recipe/     
         
本节挑选了常见的一些技巧来讲解，并针对本次赛题进行具体分析。与传统的机器学习模型不同，深度学习模型的精度与模型的复杂度、数据量、正则化、数据扩增等因素直接相关。所以当深度学习模型处于不同的阶段（欠拟合、过拟合和完美拟合）的情况下，大家可以知道可以什么角度来继续优化模型。                 
                
在参加本次比赛的过程中，我建议大家以如下逻辑完成：      
        
- 1.初步构建简单的CNN模型，不用特别复杂，跑通训练、验证和预测的流程；    
                
- 2.简单CNN模型的损失会比较大，尝试增加模型复杂度，并观察验证集精度；            
             
- 3.在增加模型复杂度的同时增加数据扩增方法，直至验证集精度不变。
       
           
### 4.6 本章小节             
本章以深度学习模型的训练和验证为基础，讲解了验证集划分方法、模型训练与验证、模型保存和加载以及模型调参流程。
                
需要注意的是模型复杂度是相对的，并不一定模型越复杂越好。在有限设备和有限时间下，需要选择能够快速迭代训练的模型。      




```python
import os, sys, glob, shutil, json
os.environ["CUDA_VISIBLE_DEVICES"] = '1'
import cv2

from PIL import Image
import numpy as np

from tqdm import tqdm, tqdm_notebook

%pylab inline

import torch
torch.manual_seed(0)
torch.backends.cudnn.deterministic = False
torch.backends.cudnn.benchmark = True

import torchvision.models as models
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.autograd import Variable
from torch.utils.data.dataset import Dataset

sys.path.append('/home/suntianrui')
from SoTinShuiLib import * 
```

    Populating the interactive namespace from numpy and matplotlib


# 定义读取数据集


```python
class SVHNDataset(Dataset):
    def __init__(self, img_path, img_label, transform=None):
        self.img_path = img_path
        self.img_label = img_label 
        if transform is not None:
            self.transform = transform
        else:
            self.transform = None

    def __getitem__(self, index):
        img = Image.open(self.img_path[index]).convert('RGB')

        if self.transform is not None:
            img = self.transform(img)
        
        lbl = np.array(self.img_label[index], dtype=np.int)
        lbl = list(lbl)  + (5 - len(lbl)) * [10]
        return img, torch.from_numpy(np.array(lbl[:5]))

    def __len__(self):
        return len(self.img_path)
```

# 定义读取数据dataloader

假设数据存放在`data`文件夹下，并进行解压。


```python
train_path = glob.glob('data/train_data/mchar_train/*.png')
train_path.sort()
train_json = json.load(open('data/mchar_train.json'))
train_label = [train_json[x]['label'] for x in train_json]
print(len(train_path), len(train_label))
train_loader = torch.utils.data.DataLoader(
    SVHNDataset(train_path, train_label,
                transforms.Compose([
                    transforms.Resize((64, 128)),
                    transforms.RandomCrop((60, 120)),
                    transforms.ColorJitter(0.3, 0.3, 0.2),
                    transforms.RandomRotation(10),
                    transforms.ToTensor(),
                    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])), 
    batch_size=40, 
    shuffle=True, 
    num_workers=10,
    
)

val_path = glob.glob('data/val_data/mchar_val/*.png')
val_path.sort()
val_json = json.load(open('data/mchar_val.json'))
val_label = [val_json[x]['label'] for x in val_json]
print(len(val_path), len(val_label))

val_loader = torch.utils.data.DataLoader(
    SVHNDataset(val_path, val_label,
                transforms.Compose([
                    transforms.Resize((60, 120)),
                    # transforms.ColorJitter(0.3, 0.3, 0.2),
                    # transforms.RandomRotation(5),
                    transforms.ToTensor(),
                    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])), 
    batch_size=40, 
    shuffle=False, 
    num_workers=10,
)
```

    30000 30000
    10000 10000


# 定义分类模型

这里使用ResNet18的模型进行特征提取


```python
class FlattenLayer(torch.nn.Module):
    def __init__(self):
        super(FlattenLayer, self).__init__()
    def forward(self, x): # x shape: (batch, *, *, ...)
        return x.view(x.shape[0], -1)
class GlobalAvgPool2d(nn.Module):
    # 全局平均池化层可通过将池化窗口形状设置成输入的高和宽实现
    def __init__(self):
        super(GlobalAvgPool2d, self).__init__()
    def forward(self, x):
        return F.avg_pool2d(x, kernel_size=x.size()[2:])
class hswish(nn.Module):
    def forward(self, x):
        out = x * F.relu6(x + 3, inplace=True) / 6
        return out
class GlobalAvgPool2d(nn.Module):
    # 全局平均池化层可通过将池化窗口形状设置成输入的高和宽实现
    def __init__(self,kernelsize=(1,1),stride=(1,1)):
        super(GlobalAvgPool2d, self).__init__()
        self.kernelsize=kernelsize
        self.stride=stride
    def forward(self, x):
        return F.avg_pool2d(x, kernel_size=self.kernelsize,stride=self.stride) 
class SVHN_Model1(nn.Module):
    def __init__(self):
        super(SVHN_Model1, self).__init__()
                
        model_conv = models.resnet18(pretrained=True)
        model_conv.avgpool = nn.AdaptiveAvgPool2d(1)
        model_conv.relu= hswish()
        model_conv = nn.Sequential(*list(model_conv.children())[:-1])
        self.cnn = model_conv
        
        self.fc1 = nn.Sequential(nn.Linear(512, 64),
                                 nn.Dropout(),
                                 nn.LeakyReLU(),
                                 nn.Linear(64, 64),
                                 nn.Dropout(),
                                 nn.LeakyReLU(),
                                 nn.Linear(64, 11))
        self.fc2 = nn.Sequential(nn.Linear(512, 64),nn.Dropout(),nn.LeakyReLU(),nn.Linear(64, 64),nn.Dropout(),nn.LeakyReLU(),nn.Linear(64, 11))
        self.fc3 = nn.Sequential(nn.Linear(512, 64),nn.Dropout(),nn.LeakyReLU(),nn.Linear(64, 64),nn.Dropout(),nn.LeakyReLU(),nn.Linear(64, 11))
        self.fc4 = nn.Sequential(nn.Linear(512, 64),nn.Dropout(),nn.LeakyReLU(),nn.Linear(64, 64),nn.Dropout(),nn.LeakyReLU(),nn.Linear(64, 11))
        self.fc5 = nn.Sequential(nn.Linear(512, 64),nn.Dropout(),nn.LeakyReLU(),nn.Linear(64, 64),nn.Dropout(),nn.LeakyReLU(),nn.Linear(64, 11))
    def forward(self, img):        
        feat = self.cnn(img)
        # print(feat.shape)
        feat = feat.view(feat.shape[0], -1)
        c1 = self.fc1(feat)
        c2 = self.fc2(feat)
        c3 = self.fc3(feat)
        c4 = self.fc4(feat)
        c5 = self.fc5(feat)
        return c1, c2, c3, c4, c5
```


```python
def train(train_loader, model, criterion, optimizer, epoch):
    # 切换模型为训练模式
    model.train()
    train_loss = []
    
    for i, (input, target) in enumerate(train_loader):
        if use_cuda:
            input = input.cuda()
            target = target.cuda()
            
        c0, c1, c2, c3, c4 = model(input)
        loss = criterion(c0, target[:, 0]) + \
                criterion(c1, target[:, 1]) + \
                criterion(c2, target[:, 2]) + \
                criterion(c3, target[:, 3]) + \
                criterion(c4, target[:, 4])
        
        # loss /= 6
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        train_loss.append(loss.item())
    return np.mean(train_loss)

def validate(val_loader, model, criterion):
    # 切换模型为预测模型
    model.eval()
    val_loss = []

    # 不记录模型梯度信息
    with torch.no_grad():
        for i, (input, target) in enumerate(val_loader):
            if use_cuda:
                input = input.cuda()
                target = target.cuda()
            
            c0, c1, c2, c3, c4 = model(input)
            loss = criterion(c0, target[:, 0]) + \
                    criterion(c1, target[:, 1]) + \
                    criterion(c2, target[:, 2]) + \
                    criterion(c3, target[:, 3]) + \
                    criterion(c4, target[:, 4])
            # loss /= 6
            val_loss.append(loss.item())
    return np.mean(val_loss)

def predict(test_loader, model, tta=10):
    model.eval()
    test_pred_tta = None
    
    # TTA 次数
    for _ in range(tta):
        test_pred = []
    
        with torch.no_grad():
            for i, (input, target) in enumerate(test_loader):
                if use_cuda:
                    input = input.cuda()
                
                c0, c1, c2, c3, c4 = model(input)
                if use_cuda:
                    output = np.concatenate([
                        c0.data.cpu().numpy(), 
                        c1.data.cpu().numpy(),
                        c2.data.cpu().numpy(), 
                        c3.data.cpu().numpy(),
                        c4.data.cpu().numpy()], axis=1)
                else:
                    output = np.concatenate([
                        c0.data.numpy(), 
                        c1.data.numpy(),
                        c2.data.numpy(), 
                        c3.data.numpy(),
                        c4.data.numpy()], axis=1)
                
                test_pred.append(output)
        
        test_pred = np.vstack(test_pred)
        if test_pred_tta is None:
            test_pred_tta = test_pred
        else:
            test_pred_tta += test_pred
    
    return test_pred_tta
```

# 训练与验证


```python
model = SVHN_Model1()
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), 0.001)
best_loss = 1000.0

use_cuda = True
if use_cuda:
    model = model.cuda()

for epoch in range(50):
    train_loss = train(train_loader, model, criterion, optimizer, epoch)
    val_loss = validate(val_loader, model, criterion)
    
    val_label = [''.join(map(str, x)) for x in val_loader.dataset.img_label]
    val_predict_label = predict(val_loader, model, 1)
    val_predict_label = np.vstack([
        val_predict_label[:, :11].argmax(1),
        val_predict_label[:, 11:22].argmax(1),
        val_predict_label[:, 22:33].argmax(1),
        val_predict_label[:, 33:44].argmax(1),
        val_predict_label[:, 44:55].argmax(1),
    ]).T
    val_label_pred = []
    for x in val_predict_label:
        val_label_pred.append(''.join(map(str, x[x!=10])))
    
    val_char_acc = np.mean(np.array(val_label_pred) == np.array(val_label))
    
    print('Epoch: {0}, Train loss: {1} \t Val loss: {2}'.format(epoch, train_loss, val_loss))
    print('Val Acc', val_char_acc)
    # 记录下验证集精度
    if val_loss < best_loss:
        best_loss = val_loss
        # print('Find better model in Epoch {0}, saving model.'.format(epoch))
        torch.save(model.state_dict(), './model.pt')
```

    Epoch: 0, Train loss: 5.4725278352101645 	 Val loss: 4.936271857261658
    Val Acc 0.0696
    Epoch: 1, Train loss: 4.510846019426982 	 Val loss: 4.431252672195434
    Val Acc 0.1189
    Epoch: 2, Train loss: 3.9902855679194134 	 Val loss: 3.9621781730651855
    Val Acc 0.193
    Epoch: 3, Train loss: 3.5969281253814698 	 Val loss: 3.7676900386810304
    Val Acc 0.2366
    Epoch: 4, Train loss: 3.313626867930094 	 Val loss: 3.584816078186035
    Val Acc 0.2503
    Epoch: 5, Train loss: 3.116492705980937 	 Val loss: 3.424201033592224
    Val Acc 0.2897
    Epoch: 6, Train loss: 2.9089704157511393 	 Val loss: 3.416672205924988
    Val Acc 0.3326
    Epoch: 7, Train loss: 2.7258184754053754 	 Val loss: 3.300096752643585
    Val Acc 0.3705
    Epoch: 8, Train loss: 2.539202901363373 	 Val loss: 3.184786221027374
    Val Acc 0.4047
    Epoch: 9, Train loss: 2.41479286924998 	 Val loss: 3.0346231727600097
    Val Acc 0.4215
    Epoch: 10, Train loss: 2.2962986629803974 	 Val loss: 3.005963167667389
    Val Acc 0.433
    Epoch: 11, Train loss: 2.2291834977467855 	 Val loss: 3.162040101528168
    Val Acc 0.4229
    Epoch: 12, Train loss: 2.1132085808118184 	 Val loss: 2.932807307243347
    Val Acc 0.4592
    Epoch: 13, Train loss: 2.034149662017822 	 Val loss: 2.7613315892219545
    Val Acc 0.4766
    Epoch: 14, Train loss: 1.943564680258433 	 Val loss: 2.7709294295310976
    Val Acc 0.4936
    Epoch: 15, Train loss: 1.8836859087149302 	 Val loss: 2.8101927614212037
    Val Acc 0.4752
    Epoch: 16, Train loss: 1.8275177973111472 	 Val loss: 2.792560833930969
    Val Acc 0.4806
    Epoch: 17, Train loss: 1.799716547648112 	 Val loss: 2.8086505460739137
    Val Acc 0.4965
    Epoch: 18, Train loss: 1.7295784730116526 	 Val loss: 2.76029629945755
    Val Acc 0.4961
    Epoch: 19, Train loss: 1.696609620889028 	 Val loss: 2.78057901096344
    Val Acc 0.5158
    Epoch: 20, Train loss: 1.6506588481267293 	 Val loss: 2.7552101860046387
    Val Acc 0.5093
    Epoch: 21, Train loss: 1.6123793981870016 	 Val loss: 2.6600922765731814
    Val Acc 0.529
    Epoch: 22, Train loss: 1.5614330128828684 	 Val loss: 2.791669225692749
    Val Acc 0.5102
    Epoch: 23, Train loss: 1.5454277993837993 	 Val loss: 2.7000707874298095
    Val Acc 0.5244
    Epoch: 24, Train loss: 1.4864699199199676 	 Val loss: 2.6850435614585875
    Val Acc 0.5365
    Epoch: 25, Train loss: 1.474827289779981 	 Val loss: 2.578793640613556
    Val Acc 0.5396
    Epoch: 26, Train loss: 1.4408613617420196 	 Val loss: 2.671683967113495
    Val Acc 0.5204
    Epoch: 27, Train loss: 1.420574993054072 	 Val loss: 2.6144435017108916
    Val Acc 0.5314
    Epoch: 28, Train loss: 1.355164589047432 	 Val loss: 2.6434693002700804
    Val Acc 0.5514
    Epoch: 29, Train loss: 1.352650390267372 	 Val loss: 2.64366104888916
    Val Acc 0.5413



```python

```


```python
#Val Acc 0.5285
```

# 预测并生成提交文件


```python
test_path = glob.glob('../input/test_a/*.png')
test_path.sort()
test_json = json.load(open('../input/test_a.json'))
test_label = [[1]] * len(test_path)
print(len(test_path), len(test_label))

test_loader = torch.utils.data.DataLoader(
    SVHNDataset(test_path, test_label,
                transforms.Compose([
                    transforms.Resize((70, 140)),
                    # transforms.RandomCrop((60, 120)),
                    # transforms.ColorJitter(0.3, 0.3, 0.2),
                    # transforms.RandomRotation(5),
                    transforms.ToTensor(),
                    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])), 
    batch_size=40, 
    shuffle=False, 
    num_workers=10,
)
```


```python
# 加载保存的最优模型
model.load_state_dict(torch.load('model.pt'))

test_predict_label = predict(test_loader, model, 1)
print(test_predict_label.shape)

test_label = [''.join(map(str, x)) for x in test_loader.dataset.img_label]
test_predict_label = np.vstack([
    test_predict_label[:, :11].argmax(1),
    test_predict_label[:, 11:22].argmax(1),
    test_predict_label[:, 22:33].argmax(1),
    test_predict_label[:, 33:44].argmax(1),
    test_predict_label[:, 44:55].argmax(1),
]).T

test_label_pred = []
for x in test_predict_label:
    test_label_pred.append(''.join(map(str, x[x!=10])))
    
import pandas as pd
df_submit = pd.read_csv('../input/test_A_sample_submit.csv')
df_submit['file_code'] = test_label_pred
df_submit.to_csv('submit.csv', index=None)
```


```python

```
